#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö payroll –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ 5-–¥–Ω–µ–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏
"""

import os
import sys
import django
from decimal import Decimal
from datetime import datetime, date, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myhours.settings')
django.setup()

from django.db import transaction
from users.models import Employee
from payroll.models import Salary, CompensatoryDay
from payroll.services import PayrollCalculationService
from worktime.models import WorkLog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def clear_cached_payroll_data():
    """
    –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ payroll –¥–∞–Ω–Ω—ã–µ
    """
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö payroll –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –û—á–∏—â–∞–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–Ω–∏ (–æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã)
        comp_days_count = CompensatoryDay.objects.count()
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {comp_days_count} –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–Ω–µ–π")
        
        if comp_days_count > 0:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ –ª–æ–≥–∞—Ö
            logger.info("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–Ω–µ–π...")
            for comp_day in CompensatoryDay.objects.all():
                logger.info(f"  Backup: {comp_day.employee.get_full_name()} - {comp_day.date_earned} - {comp_day.reason}")
            
            # –û—á–∏—â–∞–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–Ω–∏
            CompensatoryDay.objects.all().delete()
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {comp_days_count} –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–Ω–µ–π")
        
        # –û—á–∏—â–∞–µ–º Django –∫—ç—à (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        try:
            from django.core.cache import cache
            cache.clear()
            logger.info("‚úÖ –û—á–∏—â–µ–Ω Django –∫—ç—à")
        except:
            logger.info("‚ÑπÔ∏è  Django –∫—ç—à –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def recalculate_all_employees_payroll(months_back=3):
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å payroll –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
    """
    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç payroll –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {months_back} –º–µ—Å—è—Ü–µ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å salary configuration
    employees = Employee.objects.filter(salary_info__isnull=False)
    logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ {employees.count()} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å salary configuration")
    
    if employees.count() == 0:
        logger.warning("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å salary configuration!")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    now = datetime.now()
    periods = []
    for i in range(months_back):
        target_date = now - timedelta(days=30*i)
        periods.append((target_date.year, target_date.month))
    
    logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞: {periods}")
    
    success_count = 0
    error_count = 0
    
    for employee in employees:
        logger.info(f"\n{'='*60}")
        logger.info(f"üë§ –ü–µ—Ä–µ—Å—á–µ—Ç –¥–ª—è: {employee.get_full_name()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º salary configuration
        try:
            salary = employee.salary_info
            logger.info(f"üíº –¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞: {salary.calculation_type}")
            
            if salary.calculation_type == 'hourly':
                logger.info(f"üí∞ –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {salary.hourly_rate} ‚Ç™/—á")
            elif salary.calculation_type == 'monthly':
                logger.info(f"üí∞ –ú–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary.base_salary} ‚Ç™")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ salary configuration –¥–ª—è {employee.get_full_name()}: {e}")
            error_count += 1
            continue
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        employee_success = True
        for year, month in periods:
            try:
                logger.info(f"üìä –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞ {year}-{month:02d}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞–±–æ—á–∏–µ –ª–æ–≥–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
                work_logs = WorkLog.objects.filter(
                    employee=employee,
                    check_in__year=year,
                    check_in__month=month,
                    check_out__isnull=False
                )
                
                if not work_logs.exists():
                    logger.info(f"‚ÑπÔ∏è  –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –∑–∞ {year}-{month:02d}")
                    continue
                
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {work_logs.count()} —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                calc_service = PayrollCalculationService(employee, year, month)
                result = calc_service.calculate_monthly_salary()
                
                logger.info(f"‚úÖ –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:")
                logger.info(f"   üí∞ –û–±—â–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {result['total_gross_pay']} ‚Ç™")
                logger.info(f"   ‚è∞ –û–±—ã—á–Ω—ã–µ —á–∞—Å—ã: {result['regular_hours']}—á")
                logger.info(f"   ‚è∞ –°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ: {result['overtime_hours']}—á")
                logger.info(f"   üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ: {result['holiday_hours']}—á")
                logger.info(f"   üïØÔ∏è  –°—É–±–±–æ—Ç–Ω–∏–µ: {result['sabbath_hours']}—á")
                logger.info(f"   üìÖ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–Ω–∏: {result['compensatory_days_earned']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                if result.get('warnings'):
                    logger.warning("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
                    for warning in result['warnings']:
                        logger.warning(f"   - {warning}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
                if result.get('legal_violations'):
                    logger.warning("üö® –ù–∞—Ä—É—à–µ–Ω–∏—è —Ç—Ä—É–¥–æ–≤–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞:")
                    for violation in result['legal_violations']:
                        logger.warning(f"   - {violation}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ {employee.get_full_name()} –∑–∞ {year}-{month:02d}: {e}")
                employee_success = False
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
                continue
        
        if employee_success:
            success_count += 1
            logger.info(f"‚úÖ {employee.get_full_name()} - –ø–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            error_count += 1
            logger.error(f"‚ùå {employee.get_full_name()} - –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ")
    
    logger.info(f"\n{'='*60}")
    logger.info(f"üìä –ò–¢–û–ì–ò –ü–ï–†–ï–°–ß–ï–¢–ê:")
    logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    logger.info(f"   ‚ùå –û—à–∏–±–∫–∏: {error_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    logger.info(f"   üìÖ –ü–µ—Ä–∏–æ–¥—ã: {len(periods)} –º–µ—Å—è—Ü–µ–≤")
    
    return success_count > 0

def validate_new_calculations():
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    """
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ —Å–µ—Ä–≤–∏—Å–µ
        from payroll.services import PayrollCalculationService
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç:")
        logger.info(f"   MAX_WEEKLY_REGULAR_HOURS: {PayrollCalculationService.MAX_WEEKLY_REGULAR_HOURS}")
        logger.info(f"   MONTHLY_WORK_HOURS: {PayrollCalculationService.MONTHLY_WORK_HOURS}")
        logger.info(f"   OVERTIME_RATE_1: {PayrollCalculationService.OVERTIME_RATE_1}")
        logger.info(f"   OVERTIME_RATE_2: {PayrollCalculationService.OVERTIME_RATE_2}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        if PayrollCalculationService.MAX_WEEKLY_REGULAR_HOURS == 42:
            logger.info("‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: 42 —á–∞—Å–∞ (5-–¥–Ω–µ–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è)")
        else:
            logger.warning(f"‚ö†Ô∏è  –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: {PayrollCalculationService.MAX_WEEKLY_REGULAR_HOURS} —á–∞—Å–æ–≤")
        
        if PayrollCalculationService.MONTHLY_WORK_HOURS == 182:
            logger.info("‚úÖ –ú–µ—Å—è—á–Ω–∞—è –Ω–æ—Ä–º–∞: 182 —á–∞—Å–∞ (5-–¥–Ω–µ–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è)")
        else:
            logger.warning(f"‚ö†Ô∏è  –ú–µ—Å—è—á–Ω–∞—è –Ω–æ—Ä–º–∞: {PayrollCalculationService.MONTHLY_WORK_HOURS} —á–∞—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–Ω–∏
        comp_days_count = CompensatoryDay.objects.count()
        logger.info(f"üìÖ –°–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–Ω–µ–π: {comp_days_count}")
        
        if comp_days_count > 0:
            latest_comp_days = CompensatoryDay.objects.order_by('-created_at')[:5]
            logger.info("üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–Ω–∏:")
            for comp_day in latest_comp_days:
                logger.info(f"   {comp_day.employee.get_full_name()} - {comp_day.date_earned} - {comp_day.reason}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª–Ω—ã–π reset –∏ –ø–µ—Ä–µ—Å—á–µ—Ç
    """
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π reset –∏ –ø–µ—Ä–µ—Å—á–µ—Ç payroll –¥–∞–Ω–Ω—ã—Ö...")
    logger.info("=" * 80)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(sys.argv) < 2 or sys.argv[1] != '--confirm':
        logger.info("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ payroll –¥–∞–Ω–Ω—ã–µ!")
        logger.info("üí° –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        logger.info("   python full_payroll_reset_and_recalc.py --confirm")
        logger.info("   –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ --months N –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—è—Ü–µ–≤")
        return
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    months_back = 3
    if len(sys.argv) > 2 and sys.argv[2] == '--months':
        months_back = int(sys.argv[3]) if len(sys.argv) > 3 else 3
    
    logger.info(f"üìÖ –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–µ—Å—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {months_back} –º–µ—Å—è—Ü–µ–≤")
    
    # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞
    logger.info("\nüßπ –®–ê–ì 1: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    if not clear_cached_payroll_data():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        return
    
    # –®–∞–≥ 2: –ü–µ—Ä–µ—Å—á–µ—Ç
    logger.info(f"\nüîÑ –®–ê–ì 2: –ü–µ—Ä–µ—Å—á–µ—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
    if not recalculate_all_employees_payroll(months_back):
        logger.error("‚ùå –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏.")
        return
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞
    logger.info(f"\nüîç –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    if not validate_new_calculations():
        logger.warning("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã.")
    
    logger.info("\n" + "=" * 80)
    logger.info("üéâ –ü–û–õ–ù–´–ô RESET –ò –ü–ï–†–ï–°–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù!")
    logger.info("üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ payroll –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º 5-–¥–Ω–µ–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏")
    logger.info("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")

if __name__ == "__main__":
    main()