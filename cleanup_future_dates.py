#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MyHours
–°–µ–≥–æ–¥–Ω—è: 24 –∏—é–ª—è 2025 (24/07/2025)

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ WorkLog —Å –¥–∞—Ç–∞–º–∏ –±–æ–ª—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏—Ö
"""

import os
import sys
import django
from datetime import date, datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myhours.settings')
django.setup()

from worktime.models import WorkLog
from users.models import Employee

def find_future_records():
    """–ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏"""
    today = date.today()
    print(f"üóìÔ∏è –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {today.strftime('%d/%m/%Y')}")
    print("=" * 50)
    
    # –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ WorkLog —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏
    future_worklogs = WorkLog.objects.filter(
        check_in__date__gt=today
    ).order_by('check_in')
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {future_worklogs.count()} –∑–∞–ø–∏—Å–µ–π WorkLog —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏:")
    print()
    
    if future_worklogs.exists():
        print("ID | –°–æ—Ç—Ä—É–¥–Ω–∏–∫ | –î–∞—Ç–∞ –≤—Ö–æ–¥–∞ | –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ | –ß–∞—Å—ã")
        print("-" * 60)
        
        for log in future_worklogs:
            employee_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                if log.employee:
                    employee_name = f"{log.employee.first_name} {log.employee.last_name}"
                elif hasattr(log, 'employee_id'):
                    try:
                        emp = Employee.objects.get(id=log.employee_id)
                        employee_name = f"{emp.first_name} {emp.last_name}"
                    except Employee.DoesNotExist:
                        employee_name = f"ID:{log.employee_id}"
            except Exception as e:
                employee_name = f"–û—à–∏–±–∫–∞: {str(e)}"
            
            check_in_date = log.check_in.strftime('%d/%m/%Y %H:%M') if log.check_in else "–ù–µ—Ç"
            check_out_date = log.check_out.strftime('%d/%m/%Y %H:%M') if log.check_out else "–ù–µ—Ç"
            hours = f"{log.hours_worked:.2f}h" if log.hours_worked else "0h"
            
            print(f"{log.id:3d} | {employee_name:15s} | {check_in_date:16s} | {check_out_date:16s} | {hours}")
    
    return future_worklogs

def analyze_impact(future_worklogs):
    """–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è —ç—Ç–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
    print("\n" + "=" * 50)
    print("üìà –ê–ù–ê–õ–ò–ó –í–õ–ò–Ø–ù–ò–Ø:")
    
    if not future_worklogs.exists():
        print("‚úÖ –ó–∞–ø–∏—Å–µ–π —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏ –Ω–µ—Ç - –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ!")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    employees_affected = {}
    total_future_hours = 0
    
    for log in future_worklogs:
        employee_key = "unknown"
        try:
            if log.employee:
                employee_key = f"{log.employee.first_name} {log.employee.last_name}"
            elif hasattr(log, 'employee_id'):
                employee_key = f"Employee ID: {log.employee_id}"
        except:
            pass
        
        if employee_key not in employees_affected:
            employees_affected[employee_key] = {
                'records': 0,
                'hours': 0
            }
        
        employees_affected[employee_key]['records'] += 1
        if log.hours_worked:
            employees_affected[employee_key]['hours'] += log.hours_worked
            total_future_hours += log.hours_worked
    
    print(f"üë• –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employees_affected)}")
    print(f"‚è∞ –û–±—â–∏–µ '–±—É–¥—É—â–∏–µ' —á–∞—Å—ã: {total_future_hours:.2f}h")
    print()
    
    print("–î–µ—Ç–∞–ª–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:")
    for emp, data in employees_affected.items():
        print(f"  ‚Ä¢ {emp}: {data['records']} –∑–∞–ø–∏—Å–µ–π, {data['hours']:.2f}h")
    
    print("\nüö® –ü–û–ß–ï–ú–£ –≠–¢–û –ü–†–û–ë–õ–ï–ú–ê:")
    print("  ‚Ä¢ –ò—Å–∫–∞–∂–∞–µ—Ç —Ä–∞—Å—á–µ—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç")
    print("  ‚Ä¢ –í–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç—á–µ—Ç—ã –ø–æ —á–∞—Å–∞–º")
    print("  ‚Ä¢ –ú–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("  ‚Ä¢ –ü—É—Ç–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ")

def safe_delete_records(future_worklogs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π"""
    if not future_worklogs.exists():
        print("‚úÖ –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å!")
        return
    
    print("\n" + "=" * 50)
    print("üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ï–ô")
    
    count = future_worklogs.count()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ö†Ô∏è –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏.")
    print("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
    
    while True:
        confirm = input("\n–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").lower().strip()
        
        if confirm in ['–¥–∞', 'yes', 'y']:
            print("\nüîÑ –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏...")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
            backup_data = []
            for log in future_worklogs:
                backup_data.append({
                    'id': log.id,
                    'employee_id': getattr(log, 'employee_id', None),
                    'check_in': log.check_in,
                    'check_out': log.check_out,
                    'hours_worked': log.hours_worked,
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –≤ —Ñ–∞–π–ª
            backup_filename = f"backup_future_records_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(backup_filename, 'w', encoding='utf-8') as f:
                f.write("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏\n")
                f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
                f.write("=" * 60 + "\n")
                for item in backup_data:
                    f.write(f"ID: {item['id']}, Employee: {item['employee_id']}, "
                           f"Check-in: {item['check_in']}, Check-out: {item['check_out']}, "
                           f"Hours: {item['hours_worked']}\n")
            
            print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_filename}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏
            deleted_count, deleted_details = future_worklogs.delete()
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π!")
            print("–î–µ—Ç–∞–ª–∏:", deleted_details)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            remaining = WorkLog.objects.filter(check_in__date__gt=date.today()).count()
            if remaining == 0:
                print("üéâ –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
            else:
                print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –µ—â–µ {remaining} –∑–∞–ø–∏—Å–µ–π —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏")
            
            break
            
        elif confirm in ['–Ω–µ—Ç', 'no', 'n']:
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            break
        else:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –û–ß–ò–°–¢–ö–ê –ó–ê–ü–ò–°–ï–ô –° –ë–£–î–£–©–ò–ú–ò –î–ê–¢–ê–ú–ò")
    print("=" * 50)
    
    try:
        # –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏
        future_records = find_future_records()
        
        # –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ
        analyze_impact(future_records)
        
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
        if future_records.exists():
            safe_delete_records(future_records)
        
        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()