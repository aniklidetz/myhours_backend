# Example GitHub Actions workflow for production deployment
# Save this as .github/workflows/deploy-prod.yml

name: Deploy to Production

on:
  push:
    branches: [main]  # Deploy on push to main branch
  workflow_dispatch:  # Manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production  # Use GitHub environment for secret management
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run security checks
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        DJANGO_SETTINGS_MODULE: myhours.settings_prod
      run: |
        python manage.py check --deploy --fail-level WARNING
        
    - name: Run tests
      env:
        DJANGO_SETTINGS_MODULE: myhours.settings_ci
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/myhours_test
      run: |
        python -m pytest --cov=. --cov-fail-under=70
        
    - name: Deploy to production
      env:
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      run: |
        # Your deployment commands here
        echo "Deploying to production with secure settings..."
        
# Required GitHub Secrets (set in repository settings):
# - DJANGO_SECRET_KEY: Generate with the command from above
# - DATABASE_URL: postgresql://user:pass@host:5432/dbname  
# - REDIS_URL: redis://host:6379/0
# - EMAIL_HOST: smtp.gmail.com (or your email provider)
# - EMAIL_HOST_USER: your-email@gmail.com
# - EMAIL_HOST_PASSWORD: your-app-password