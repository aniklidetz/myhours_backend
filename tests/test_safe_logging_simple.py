"""
Simplified tests for safe logging utilities (without database dependencies)
"""

import os
import sys
import unittest

# Add project path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.logging_utils import (
    hash_user_id,
    mask_coordinates,
    mask_email,
    mask_name,
    mask_phone,
    safe_log_location,
)


class SafeLoggingUtilsTest(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è PII –¥–∞–Ω–Ω—ã—Ö"""

    def test_mask_email(self):
        """–¢–µ—Å—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è email –∞–¥—Ä–µ—Å–æ–≤"""
        # –û–±—ã—á–Ω—ã–µ email
        self.assertEqual(mask_email("admin@example.com"), "a***@example.com")
        self.assertEqual(mask_email("john.doe@company.org"), "j***@company.org")
        self.assertEqual(mask_email("a@test.com"), "*@test.com")

        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        self.assertEqual(mask_email(""), "[invalid_email]")
        self.assertEqual(mask_email("invalid-email"), "[invalid_email]")
        self.assertEqual(mask_email("@domain.com"), "*@domain.com")

    def test_mask_phone(self):
        """–¢–µ—Å—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"""
        # –û–±—ã—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
        self.assertEqual(mask_phone("+972501234567"), "***4567")
        self.assertEqual(mask_phone("1234567890"), "***7890")
        self.assertEqual(mask_phone("+1-234-567-8901"), "***8901")

        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        self.assertEqual(mask_phone(""), "[no_phone]")
        self.assertEqual(mask_phone("123"), "***")
        self.assertEqual(mask_phone("abc"), "***")

    def test_mask_coordinates(self):
        """–¢–µ—Å—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        # –û—Ñ–∏—Å–Ω–∞—è –∑–æ–Ω–∞ (–¢–µ–ª—å-–ê–≤–∏–≤)
        self.assertEqual(mask_coordinates(32.05, 34.78), "Office Area")
        self.assertEqual(mask_coordinates(32.051, 34.781), "Office Area")

        # –ì–æ—Ä–æ–¥—Å–∫–∞—è –∑–æ–Ω–∞
        self.assertEqual(mask_coordinates(32.5, 34.5), "City Area")
        self.assertEqual(mask_coordinates(31.8, 34.2), "City Area")

        # –£–¥–∞–ª—ë–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        self.assertEqual(mask_coordinates(40.7, -74.0), "Remote Location")
        self.assertEqual(mask_coordinates(51.5, -0.1), "Remote Location")

    def test_mask_name(self):
        """–¢–µ—Å—Ç –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –∏–º—ë–Ω"""
        # –û–±—ã—á–Ω—ã–µ –∏–º–µ–Ω–∞
        self.assertEqual(mask_name("John Doe"), "J.D.")
        self.assertEqual(mask_name("Sarah Jane Smith"), "S.J.")
        self.assertEqual(mask_name("Admin"), "A.")

        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        self.assertEqual(mask_name(""), "[no_name]")
        self.assertEqual(mask_name("   "), "[no_name]")

    def test_hash_user_id(self):
        """–¢–µ—Å—Ç —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è user ID"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö—ç—à–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö ID
        hash1 = hash_user_id(123)
        hash2 = hash_user_id(123)
        self.assertEqual(hash1, hash2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö—ç—à–∏ —Ä–∞–∑–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö ID
        hash3 = hash_user_id(456)
        self.assertNotEqual(hash1, hash3)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        self.assertTrue(hash1.startswith("usr_"))
        self.assertEqual(len(hash1), 12)  # usr_ + 8 —Å–∏–º–≤–æ–ª–æ–≤

        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        self.assertEqual(hash_user_id(None), "[no_id]")
        self.assertEqual(hash_user_id(""), "[no_id]")

    def test_safe_log_location(self):
        """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        # –û–±—ã—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        self.assertEqual(safe_log_location(32.05, 34.78), "Office Area")
        self.assertEqual(safe_log_location(None, None), "Location Unknown")
        self.assertEqual(safe_log_location(32.05, None), "Location Unknown")


class PIIDetectionTest(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ç–µ—á–µ–∫ PII"""

    def test_email_detection_patterns(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è email –≤ —Å—Ç—Ä–æ–∫–∞—Ö"""
        import re

        email_pattern = r"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b"

        # –î–æ–ª–∂–Ω—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å—Å—è
        test_strings = [
            "User admin@example.com logged in",
            "Contact: john.doe@company.org for details",
            "Email sent to test+tag@domain.co.uk",
        ]

        for test_str in test_strings:
            with self.subTest(test_str=test_str):
                self.assertTrue(re.search(email_pattern, test_str))

        # –ù–ï –¥–æ–ª–∂–Ω—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å—Å—è
        safe_strings = [
            "User a***@example.com logged in",
            "Contact details masked",
            "Email sent successfully",
        ]

        for test_str in safe_strings:
            with self.subTest(test_str=test_str):
                self.assertFalse(re.search(email_pattern, test_str))

    def test_coordinates_detection_patterns(self):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        import re

        coord_pattern = r"\b\d{1,3}\.\d{4,}\b"  # –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å 4+ –∑–Ω–∞–∫–∞–º–∏

        # –î–æ–ª–∂–Ω—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å—Å—è (—Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        risky_strings = [
            "Location: 32.050936, 34.781800",
            "GPS: lat=40.7589, lng=-73.9851",
        ]

        for test_str in risky_strings:
            with self.subTest(test_str=test_str):
                self.assertTrue(re.search(coord_pattern, test_str))

        # –ù–ï –¥–æ–ª–∂–Ω—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å—Å—è (–æ–±–æ–±—â—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        safe_strings = ["Location: Office Area", "GPS: City Area", "Distance: 1.02m"]

        for test_str in safe_strings:
            with self.subTest(test_str=test_str):
                self.assertFalse(re.search(coord_pattern, test_str))


class SecurityComplianceTest(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""

    def test_email_masking_gdpr_compliance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è GDPR –ø—Ä–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–∏ email"""
        test_emails = ["user@example.com", "long.email.address@very-long-domain.co.uk"]

        for email in test_emails:
            masked = mask_email(email)

            # Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω
            self.assertNotEqual(email, masked)

            # –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å username –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∫—Ä—ã—Ç–∞
            username = email.split("@")[0]
            if len(username) > 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å username —Å–∫—Ä—ã—Ç–∞
                self.assertNotIn(username[1:], masked)

            # –î–æ–º–µ–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª–µ–π
            original_domain = email.split("@")[1]
            self.assertIn(original_domain, masked)

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö email
        short_masked = mask_email("a@b.com")
        self.assertEqual(short_masked, "*@b.com")

    def test_coordinates_privacy_protection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        # –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ñ–∏—Å–∞
        office_lat, office_lng = 32.050936, 34.781800

        # –ü–æ—Å–ª–µ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—â–∞—è –∑–æ–Ω–∞
        masked_location = mask_coordinates(office_lat, office_lng)

        # –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ù–ï –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        self.assertNotIn(str(office_lat), masked_location)
        self.assertNotIn(str(office_lng), masked_location)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–æ–±—â—ë–Ω–Ω—ã–º
        self.assertIn("Area", masked_location)


if __name__ == "__main__":
    print("üß™ Running safe logging tests...")
    print("=" * 50)

    # Run all tests
    unittest.main(verbosity=2)
