services:
  # Django Web Application
  web:
    build: .
    container_name: myhours_web
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
      - ./staticfiles:/app/staticfiles
      - ./backups:/app/backups
    environment:
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,192.168.1.164,*
      - DATABASE_URL=postgresql://myhours_user:${POSTGRES_PASSWORD}@postgres:5432/myhours_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - MONGO_CONNECTION_STRING=mongodb://mongodb:27017/
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=biometrics_db
      - MONGO_DB_NAME=biometrics_db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - myhours_network
    healthcheck:
      test: ["CMD", "python", "manage.py", "check"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker
  celery:
    build: .
    container_name: myhours_celery
    restart: unless-stopped
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
      - ./backups:/app/backups
    environment:
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,192.168.1.164,*
      - DATABASE_URL=postgresql://myhours_user:${POSTGRES_PASSWORD}@postgres:5432/myhours_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - MONGO_CONNECTION_STRING=mongodb://mongodb:27017/
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DB=biometrics_db
      - MONGO_DB_NAME=biometrics_db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - myhours_network
    command: celery -A myhours worker -l info
    healthcheck:
      test: ["CMD", "celery", "-A", "myhours", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: myhours_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: myhours_db
      POSTGRES_USER: myhours_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      - myhours_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myhours_user -d myhours_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: myhours_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - myhours_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB for biometrics (no auth for development)
  mongodb:
    image: mongo:7
    container_name: myhours_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: biometrics_db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - myhours_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  media_data:
    driver: local
  static_data:
    driver: local

networks:
  myhours_network:
    driver: bridge