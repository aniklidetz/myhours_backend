# Optimized Dockerfile for faster builds
FROM python:3.11-slim

# Python environment optimization
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install system dependencies (minimal runtime set for headless operation)
# Note: build-essential & cmake removed (~100MB saved) since we use pre-built wheels
# If compilation needed, use multi-stage build with build dependencies in builder stage
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgomp1 \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgl1 \
    libopenblas0 \
    && rm -rf /var/lib/apt/lists/*

# Optional: Install PNG library with t64 fallback (uncomment if runtime errors occur)
# RUN apt-get update && \
#     (apt-get install -y --no-install-recommends libpng16-16 || \
#      apt-get install -y --no-install-recommends libpng16-16t64) && \
#     rm -rf /var/lib/apt/lists/* || true

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies with BuildKit cache optimization
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip && \
    pip install wheel && \
    pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . .

# Create necessary directories
RUN mkdir -p logs media staticfiles

# Set permissions
RUN chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD python manage.py check --deploy || exit 1

# Default command
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]