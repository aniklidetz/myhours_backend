# Multi-stage build for optimized image size with compile support
# Stage 1: Builder with compile dependencies for dlib/face_recognition
FROM python:3.11-slim AS builder

# Python environment optimization
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies for compiling dlib
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    libgomp1 \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgl1 \
    libopenblas-dev \
    && rm -rf /var/lib/apt/lists/*

# Set work directory for building
WORKDIR /build

# Copy requirements and install with compilation support
# Use separate requirements files for different scenarios
COPY requirements*.txt ./
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip wheel && \
    # Install runtime dependencies first (lighter packages)
    if [ -f requirements-ci.txt ]; then \
        pip install --prefix=/install --prefer-binary --no-cache-dir -r requirements-ci.txt; \
    fi && \
    # Install biometric dependencies that may need compilation
    pip install --prefix=/install --prefer-binary --no-cache-dir \
        face-recognition==1.3.0 \
        face_recognition_models==0.3.0 \
        dlib==19.24.6

# Stage 2: Runtime image (minimal size)
FROM python:3.11-slim

# Python environment optimization
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Install only runtime dependencies (no build tools)
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgomp1 \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgl1 \
    libopenblas0 \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Copy compiled packages from builder stage
COPY --from=builder /install /usr/local

# Copy project files
COPY . .

# Create necessary directories
RUN mkdir -p logs media staticfiles

# Set permissions
RUN chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD python manage.py check --deploy || exit 1

# Default command
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]