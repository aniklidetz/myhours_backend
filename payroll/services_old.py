"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–º—É —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É

–û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –ø–æ –º–µ—Å—è—Ü–∞–º
2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö (125% ‚Üí 150%)
3. –¢–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç —à–∞–±–∞—Ç–Ω—ã—Ö —á–∞—Å–æ–≤ (150% + 175%)
4. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω (7—á –ª–∏–º–∏—Ç)
5. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–Ω–µ–π
"""

from django.utils import timezone
from django.db import models
from datetime import datetime, date, timedelta
from decimal import Decimal
import logging
import calendar

from worktime.models import WorkLog
from payroll.models import Salary, CompensatoryDay
from integrations.models import Holiday
from integrations.services.sunrise_sunset_service import SunriseSunsetService

logger = logging.getLogger(__name__)

class PayrollCalculationService:
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–º—É —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
    """
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∞ –¥–ª—è 5-–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏
    MAX_DAILY_HOURS = Decimal('12')
    MAX_WEEKLY_REGULAR_HOURS = Decimal('42')  # 5-–¥–Ω–µ–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è
    MAX_WEEKLY_OVERTIME_HOURS = Decimal('16')
    MINIMUM_WAGE_ILS = Decimal('5300')
    MONTHLY_WORK_HOURS = Decimal('182')
    
    # –î–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã —á–∞—Å–æ–≤ –¥–ª—è 5-–¥–Ω–µ–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏
    REGULAR_DAILY_HOURS = Decimal('8.6')  # 4 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é
    SHORT_DAILY_HOURS = Decimal('7.6')    # 1 –¥–µ–Ω—å –≤ –Ω–µ–¥–µ–ª—é (–æ–±—ã—á–Ω–æ –ø—è—Ç–Ω–∏—Ü–∞)
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω
    NIGHT_SHIFT_START = 22  # 22:00
    NIGHT_SHIFT_END = 6     # 06:00
    NIGHT_SHIFT_MAX_REGULAR_HOURS = Decimal('7')  # –ú–∞–∫—Å. –æ–±—ã—á–Ω—ã–µ —á–∞—Å—ã –¥–ª—è –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã
    OVERTIME_RATE_1 = Decimal('1.25')  # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö
    OVERTIME_RATE_2 = Decimal('1.50')  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ
    HOLIDAY_RATE = Decimal('1.50')     # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫
    SABBATH_RATE = Decimal('1.50')     # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–∞—Ç
    
    def __init__(self, employee, year, month):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
        
        Args:
            employee (Employee): –û–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            year (int): –ì–æ–¥ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
            month (int): –ú–µ—Å—è—Ü –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞
        """
        self.employee = employee
        self.year = year
        self.month = month
        self.salary = employee.salary_info
        self.calculation_errors = []
        self.warnings = []
        
    def get_work_logs_for_month(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è –º–µ—Å—è—Ü–∞
        
        –ü—Ä–æ–±–ª–µ–º–∞: –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –º–æ–≥ —Ç–µ—Ä—è—Ç—å —Å–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞–ª–∏—Å—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—è—Ü–µ,
        –∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–ª–∏—Å—å –≤ –¥—Ä—É–≥–æ–º.
        
        Returns:
            QuerySet: –†–∞–±–æ—á–∏–µ –ª–æ–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        """
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ—Å—è—Ü–∞
        start_date = date(self.year, self.month, 1)
        _, last_day = calendar.monthrange(self.year, self.month)
        end_date = date(self.year, self.month, last_day)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        # –í–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ:
        # 1. –ù–∞—á–∞–ª–∏—Å—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è)
        # 2. –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞—á–∞–ª–∞)
        work_logs = WorkLog.objects.filter(
            employee=self.employee,
            check_out__isnull=False  # –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        ).filter(
            # –°–µ—Å—Å–∏—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –º–µ—Å—è—Ü–µ–º
            models.Q(check_in__date__lte=end_date) & 
            models.Q(check_out__date__gte=start_date)
        ).order_by('check_in')
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {work_logs.count()} —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –¥–ª—è {self.employee.get_full_name()} "
                   f"–≤ {self.year}-{self.month:02d}")
        
        return work_logs
    
    def is_sabbath_work(self, work_datetime):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–º—É –∑–∞–∫–æ–Ω—É
        
        –®–∞–±–∞—Ç: –æ—Ç –ø—è—Ç–Ω–∏—Ü—ã –≤–µ—á–µ—Ä–æ–º (18 –º–∏–Ω—É—Ç –¥–æ –∑–∞–∫–∞—Ç–∞) –¥–æ —Å—É–±–±–æ—Ç—ã –≤–µ—á–µ—Ä–æ–º
        (42 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∑–∞–∫–∞—Ç–∞). –î–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª–µ–π —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
        –≤ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º –∏ —Å—É–±–±–æ—Ç—É –∫–∞–∫ —Ä–∞–±–æ—Ç—É –≤ —à–∞–±–∞—Ç.
        
        Args:
            work_datetime (datetime): –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            
        Returns:
            tuple: (is_sabbath, sabbath_type, precise_timing)
        """
        work_date = work_datetime.date()
        work_time = work_datetime.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –æ —à–∞–±–∞—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        sabbath_holiday = Holiday.objects.filter(
            date=work_date,
            is_shabbat=True
        ).first()
        
        if sabbath_holiday:
            return True, 'registered_sabbath', sabbath_holiday
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –≤ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º –∏–ª–∏ —Å—É–±–±–æ—Ç—É
        if work_date.weekday() == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
            # –°—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ 18:00 –≤ –ø—è—Ç–Ω–∏—Ü—É —Ä–∞–±–æ—Ç–æ–π –≤ —à–∞–±–∞—Ç
            if work_time.hour >= 18:
                return True, 'friday_evening', None
        elif work_date.weekday() == 5:  # –°—É–±–±–æ—Ç–∞
            # –í—Å—è —Ä–∞–±–æ—Ç–∞ –≤ —Å—É–±–±–æ—Ç—É —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–π –≤ —à–∞–±–∞—Ç
            return True, 'saturday', None
            
        return False, None, None
    
    def is_night_shift(self, work_log):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–º—É –ø—Ä–∞–≤—É
        –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ = –º–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞ –º–µ–∂–¥—É 22:00-06:00
        
        Args:
            work_log (WorkLog): –†–∞–±–æ—á–∏–π –ª–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            tuple: (is_night_shift, night_hours_count)
        """
        check_in = work_log.check_in
        check_out = work_log.check_out
        
        # –í—ã—á–∏—Å–ª—è–µ–º —á–∞—Å—ã, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (22:00-06:00)
        night_hours = Decimal('0')
        
        # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã datetime –¥–ª—è –≥—Ä–∞–Ω–∏—Ü –Ω–æ—á–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        night_start = check_in.replace(hour=self.NIGHT_SHIFT_START, minute=0, second=0)
        night_end = check_in.replace(hour=self.NIGHT_SHIFT_END, minute=0, second=0)
        
        # –ï—Å–ª–∏ night_end –º–µ–Ω—å—à–µ night_start, —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        if night_end <= night_start:
            night_end += timedelta(days=1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Å –Ω–æ—á–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        if check_out > night_start and check_in < night_end:
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            overlap_start = max(check_in, night_start)
            overlap_end = min(check_out, night_end)
            
            if overlap_end > overlap_start:
                night_hours = Decimal((overlap_end - overlap_start).total_seconds() / 3600)
        
        # –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç –º–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞ –≤ –Ω–æ—á–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        is_night = night_hours >= Decimal('2')
        
        return is_night, night_hours
    
    def get_daily_hour_norm(self, work_date, is_night_shift=False):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã —á–∞—Å–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        
        Args:
            work_date (date): –î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
            is_night_shift (bool): –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–º–µ–Ω–∞ –Ω–æ—á–Ω–æ–π
            
        Returns:
            Decimal: –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ —á–∞—Å–æ–≤
        """
        # –ù–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã –∏–º–µ—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
        if is_night_shift:
            return self.NIGHT_SHIFT_MAX_REGULAR_HOURS
        
        # –ü—è—Ç–Ω–∏—Ü–∞ (weekday 4) –∏–º–µ–µ—Ç —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ —á–∞—Å—ã
        if work_date.weekday() == 4:
            return self.SHORT_DAILY_HOURS
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
        if work_date.weekday() >= 5:  # –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            return Decimal('0')  # –û–±—ã—á–Ω—ã–µ —á–∞—Å—ã –Ω–µ –æ–∂–∏–¥–∞—é—Ç—Å—è
        
        # –û–±—ã—á–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
        return self.REGULAR_DAILY_HOURS
    
    def calculate_overtime_pay(self, hours_worked, base_rate, is_special_day=False, is_night_shift=False):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—á—ë—Ç —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–º—É —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É
        
        –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
        1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: 125% –¥–ª—è –ø–µ—Ä–≤—ã—Ö 2—á, 150% –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        2. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–∞—Ç–∞/–ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ—á–Ω—ã—Ö —Å–º–µ–Ω
        
        Args:
            hours_worked (Decimal): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤
            base_rate (Decimal): –ë–∞–∑–æ–≤–∞—è —á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
            is_special_day (bool): –ü—Ä–∞–∑–¥–Ω–∏–∫/—à–∞–±–∞—Ç (—Ä–∞–∑–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã)
            is_night_shift (bool): –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ (–ª–∏–º–∏—Ç 7—á)
            
        Returns:
            dict: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã
        """
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ None –¥–ª—è –º–µ—Å—è—á–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        if base_rate is None:
            base_rate = Decimal('0')
        
        result = {
            'regular_hours': Decimal('0'),
            'regular_pay': Decimal('0'),
            'overtime_hours_1': Decimal('0'),  # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö
            'overtime_pay_1': Decimal('0'),
            'overtime_hours_2': Decimal('0'),  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ
            'overtime_pay_2': Decimal('0'),
            'total_pay': Decimal('0'),
            'rate_used': base_rate
        }
        
        if hours_worked <= 0:
            return result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        if hours_worked > self.MAX_DAILY_HOURS:
            warning = (f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {self.employee.get_full_name()} –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π "
                      f"—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: {hours_worked}—á > {self.MAX_DAILY_HOURS}—á")
            self.warnings.append(warning)
            logger.warning(warning)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö —á–∞—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–º–µ–Ω—ã
        if is_night_shift:
            # –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ –∏–º–µ–µ—Ç –º–∞–∫—Å. 7 –æ–±—ã—á–Ω—ã—Ö —á–∞—Å–æ–≤
            max_regular_hours = self.NIGHT_SHIFT_MAX_REGULAR_HOURS
        else:
            # –î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º 8.6 —á–∞—Å–æ–≤ –∫–∞–∫ –±–∞–∑—É (–∏–∑—Ä–∞–∏–ª—å—Å–∫–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
            max_regular_hours = Decimal('8.6')
        
        regular_hours = min(hours_worked, max_regular_hours)
        result['regular_hours'] = regular_hours
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—á—ë—Ç –æ–±—ã—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        if is_special_day:
            # –†–∞–±–æ—Ç–∞ –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫/—à–∞–±–∞—Ç –ø–æ–ª—É—á–∞–µ—Ç 150% –∑–∞ –≤—Å–µ —á–∞—Å—ã
            result['regular_pay'] = regular_hours * base_rate * self.HOLIDAY_RATE
        else:
            result['regular_pay'] = regular_hours * base_rate
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ —á–∞—Å—ã
        if hours_worked > max_regular_hours:
            overtime_total = hours_worked - max_regular_hours
            
            if is_special_day:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫/—à–∞–±–∞—Ç
                # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö: 175% (150% –±–∞–∑–æ–≤—ã–π + 25% —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–π)
                overtime_rate_1 = base_rate * Decimal('1.75')
                overtime_hours_1 = min(overtime_total, Decimal('2'))
                result['overtime_hours_1'] = overtime_hours_1
                result['overtime_pay_1'] = overtime_hours_1 * overtime_rate_1
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ: 200% (150% –±–∞–∑–æ–≤—ã–π + 50% —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–π)
                if overtime_total > 2:
                    overtime_rate_2 = base_rate * Decimal('2.0')
                    overtime_hours_2 = overtime_total - Decimal('2')
                    result['overtime_hours_2'] = overtime_hours_2
                    result['overtime_pay_2'] = overtime_hours_2 * overtime_rate_2
            else:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—ã—á–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö
                # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö: 125%
                overtime_rate_1 = base_rate * self.OVERTIME_RATE_1
                overtime_hours_1 = min(overtime_total, Decimal('2'))
                result['overtime_hours_1'] = overtime_hours_1
                result['overtime_pay_1'] = overtime_hours_1 * overtime_rate_1
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ: 150%
                if overtime_total > 2:
                    overtime_rate_2 = base_rate * self.OVERTIME_RATE_2
                    overtime_hours_2 = overtime_total - Decimal('2')
                    result['overtime_hours_2'] = overtime_hours_2
                    result['overtime_pay_2'] = overtime_hours_2 * overtime_rate_2
        
        result['total_pay'] = result['regular_pay'] + result['overtime_pay_1'] + result['overtime_pay_2']
        return result
    
    def calculate_daily_pay(self, work_log):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –∑–∞ –æ–¥–∏–Ω —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å —É—á—ë—Ç–æ–º –æ—Å–æ–±—ã—Ö –¥–Ω–µ–π
        
        Args:
            work_log (WorkLog): –ó–∞–ø–∏—Å—å –æ —Ä–∞–±–æ—á–µ–º –¥–Ω–µ
            
        Returns:
            dict: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –∑–∞ –¥–µ–Ω—å
        """
        work_date = work_log.check_in.date()
        hours_worked = work_log.get_total_hours()
        base_rate = self.salary.hourly_rate or Decimal('0')
        
        result = {
            'date': work_date,
            'hours_worked': hours_worked,
            'is_holiday': False,
            'is_sabbath': False,
            'is_night_shift': False,
            'night_hours': Decimal('0'),
            'holiday_name': None,
            'compensatory_day_created': False,
            'regular_pay': Decimal('0'),
            'overtime_pay': Decimal('0'),
            'special_day_bonus': Decimal('0'),
            'total_pay': Decimal('0'),
            'breakdown': {}
        }
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã
        is_night, night_hours = self.is_night_shift(work_log)
        result['is_night_shift'] = is_night
        result['night_hours'] = night_hours
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫
        holiday = Holiday.objects.filter(date=work_date, is_holiday=True, is_shabbat=False).first()
        if holiday:
            result['is_holiday'] = True
            result['holiday_name'] = holiday.name
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–Ω—è
            created, _ = self.create_compensatory_day(work_date, 'holiday', hours_worked)
            result['compensatory_day_created'] = created
            
            # –†–∞—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
            pay_breakdown = self.calculate_overtime_pay(hours_worked, base_rate, 
                                                       is_special_day=True, is_night_shift=is_night)
            result['breakdown'] = pay_breakdown
            result['total_pay'] = pay_breakdown['total_pay']
            
            return result
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–∞—Ç
        is_sabbath, sabbath_type, sabbath_info = self.is_sabbath_work(work_log.check_in)
        if is_sabbath:
            result['is_sabbath'] = True
            result['sabbath_type'] = sabbath_type
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–Ω—è
            created, _ = self.create_compensatory_day(work_date, 'shabbat', hours_worked)
            result['compensatory_day_created'] = created
            
            # –†–∞—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –ø–æ —à–∞–±–∞—Ç–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
            pay_breakdown = self.calculate_overtime_pay(hours_worked, base_rate, 
                                                       is_special_day=True, is_night_shift=is_night)
            result['breakdown'] = pay_breakdown
            result['total_pay'] = pay_breakdown['total_pay']
            
            return result
        
        # –†–∞—Å—á—ë—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        pay_breakdown = self.calculate_overtime_pay(hours_worked, base_rate, 
                                                   is_special_day=False, is_night_shift=is_night)
        result['breakdown'] = pay_breakdown
        result['total_pay'] = pay_breakdown['total_pay']
        
        return result
    
    def create_compensatory_day(self, work_date, reason, work_hours=None):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–Ω—è –∑–∞ —Ä–∞–±–æ—Ç—É –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ —à–∞–±–∞—Ç
        
        Args:
            work_date (date): –î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
            reason (str): 'holiday' –∏–ª–∏ 'shabbat'
            work_hours (Decimal, optional): –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã
            
        Returns:
            tuple: (created, compensatory_day)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–µ–Ω—å
            existing = CompensatoryDay.objects.filter(
                employee=self.employee,
                date_earned=work_date,
                reason=reason
            ).first()
            
            if existing:
                logger.debug(f"–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–µ–Ω—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è {self.employee.get_full_name()} "
                           f"–Ω–∞ {work_date} (–ø—Ä–∏—á–∏–Ω–∞: {reason})")
                return False, existing
            
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–µ–Ω—å
            comp_day = CompensatoryDay.objects.create(
                employee=self.employee,
                date_earned=work_date,
                reason=reason
            )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–µ–Ω—å –¥–ª—è {self.employee.get_full_name()} "
                       f"–Ω–∞ {work_date} (–ø—Ä–∏—á–∏–Ω–∞: {reason})"
                       + (f" - {work_hours}—á –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ" if work_hours else ""))
            
            return True, comp_day
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–Ω—è –¥–ª—è {self.employee.get_full_name()}: {e}"
            self.calculation_errors.append(error_msg)
            logger.error(error_msg)
            return False, None
    
    def calculate_monthly_salary(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—á—ë—Ç –ø–æ–ª–Ω–æ–π –º–µ—Å—è—á–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        
        Returns:
            dict: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã
        """
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –ª–æ–≥–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        work_logs = self.get_work_logs_for_month()
        
        result = {
            'employee': self.employee.get_full_name(),
            'period': f"{self.year}-{self.month:02d}",
            'calculation_type': self.salary.calculation_type,
            'currency': self.salary.currency,
            'base_hourly_rate': self.salary.hourly_rate,
            'daily_calculations': [],
            'total_hours': Decimal('0'),
            'regular_hours': Decimal('0'),
            'overtime_hours': Decimal('0'),
            'holiday_hours': Decimal('0'),
            'sabbath_hours': Decimal('0'),
            'total_gross_pay': Decimal('0'),
            'compensatory_days_earned': 0,
            'legal_violations': [],
            'warnings': [],
            'errors': self.calculation_errors,
            'minimum_wage_applied': False,
            'work_sessions_count': work_logs.count(),
            'worked_days': 0
        }
        
        if not work_logs.exists():
            result['note'] = '–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'
            logger.info(f"–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è {self.employee.get_full_name()} –≤ {self.year}-{self.month:02d}")
            return result
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        for log in work_logs:
            daily_calc = self.calculate_daily_pay(log)
            result['daily_calculations'].append(daily_calc)
            
            # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
            result['total_hours'] += daily_calc['hours_worked']
            result['total_gross_pay'] += daily_calc['total_pay']
            
            if daily_calc['breakdown']:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–Ω–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—ã—á–Ω—ã–º —á–∞—Å–∞–º
                if not daily_calc['is_holiday'] and not daily_calc['is_sabbath']:
                    result['regular_hours'] += daily_calc['breakdown'].get('regular_hours', Decimal('0'))
                    # –°—á–∏—Ç–∞–µ–º —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
                    result['overtime_hours'] += (
                        daily_calc['breakdown'].get('overtime_hours_1', Decimal('0')) +
                        daily_calc['breakdown'].get('overtime_hours_2', Decimal('0'))
                    )
            
            if daily_calc['is_holiday']:
                result['holiday_hours'] += daily_calc['hours_worked']
            elif daily_calc['is_sabbath']:
                result['sabbath_hours'] += daily_calc['hours_worked']
                
            if daily_calc['compensatory_day_created']:
                result['compensatory_days_earned'] += 1
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Å—á—ë—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã)
        worked_days = len(set(log.check_in.date() for log in work_logs))
        result['worked_days'] = worked_days
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
        violations = self.validate_weekly_limits(work_logs)
        result['legal_violations'] = violations
        result['warnings'] = self.warnings
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
        if (self.salary.currency == 'ILS' and 
            result['total_gross_pay'] < self.MINIMUM_WAGE_ILS and
            result['total_hours'] >= 186):  # –ü—Ä–∏–º–µ—Ä–Ω–æ –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –º–µ—Å—è—Ü
            
            result['original_gross_pay'] = result['total_gross_pay']
            result['total_gross_pay'] = self.MINIMUM_WAGE_ILS
            result['minimum_wage_applied'] = True
            result['minimum_wage_supplement'] = self.MINIMUM_WAGE_ILS - result['original_gross_pay']
        
        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—É–º–º
        result['total_gross_pay'] = round(result['total_gross_pay'], 2)
        result['total_hours'] = round(result['total_hours'], 2)
        result['regular_hours'] = round(result['regular_hours'], 2)
        result['overtime_hours'] = round(result['overtime_hours'], 2)
        result['holiday_hours'] = round(result['holiday_hours'], 2)
        result['sabbath_hours'] = round(result['sabbath_hours'], 2)
        
        logger.info(f"‚úÖ –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {self.employee.get_full_name()}: "
                   f"{result['total_gross_pay']}‚Ç™ –∑–∞ {result['total_hours']}—á")
        
        return result
    
    def validate_weekly_limits(self, work_logs):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–º—É —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É
        
        Args:
            work_logs (QuerySet): –†–∞–±–æ—á–∏–µ –ª–æ–≥–∏ –¥–ª—è –º–µ—Å—è—Ü–∞
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
        """
        violations = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–µ –ª–æ–≥–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
        weeks = {}
        for log in work_logs:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏ (–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏)
            monday = log.check_in.date() - timedelta(days=log.check_in.weekday())
            if monday not in weeks:
                weeks[monday] = []
            weeks[monday].append(log)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
        for week_start, week_logs in weeks.items():
            week_end = week_start + timedelta(days=6)
            total_hours = sum(log.get_total_hours() for log in week_logs)
            
            regular_hours = min(total_hours, self.MAX_WEEKLY_REGULAR_HOURS)
            overtime_hours = max(Decimal('0'), total_hours - self.MAX_WEEKLY_REGULAR_HOURS)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (42 –æ–±—ã—á–Ω—ã—Ö + 16 —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö = 58 –≤—Å–µ–≥–æ)
            max_total = self.MAX_WEEKLY_REGULAR_HOURS + self.MAX_WEEKLY_OVERTIME_HOURS
            if total_hours > max_total:
                violation = {
                    'type': 'weekly_hours_exceeded',
                    'week_start': week_start,
                    'week_end': week_end,
                    'total_hours': total_hours,
                    'max_allowed': max_total,
                    'excess_hours': total_hours - max_total
                }
                violations.append(violation)
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤
            elif overtime_hours > self.MAX_WEEKLY_OVERTIME_HOURS:
                violation = {
                    'type': 'overtime_exceeded',
                    'week_start': week_start,
                    'week_end': week_end,
                    'overtime_hours': overtime_hours,
                    'max_overtime': self.MAX_WEEKLY_OVERTIME_HOURS,
                    'excess_overtime': overtime_hours - self.MAX_WEEKLY_OVERTIME_HOURS
                }
                violations.append(violation)
        
        return violations
    
    def get_detailed_breakdown(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –ø–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        
        Returns:
            dict: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç
        standard_result = self.calculate_monthly_salary()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä
        breakdown = {
            'employee': self.employee.get_full_name(),
            'period': f"{self.year}-{self.month:02d}",
            'hourly_rate': float(self.salary.hourly_rate) if self.salary.hourly_rate else 0,
            'currency': self.salary.currency,
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'regular_hours': 0.0,
            'regular_pay': 0.0,
            
            'overtime_day_hours': 0.0,
            'overtime_day_pay': 0.0,
            
            'overtime_night_hours': 0.0,
            'overtime_night_pay': 0.0,
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–∑–±–æ—Ä —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
            'overtime_125_hours': 0.0,
            'overtime_125_pay': 0.0,
            'overtime_150_hours': 0.0,
            'overtime_150_pay': 0.0,
            
            'sabbath_regular_hours': 0.0,
            'sabbath_regular_pay': 0.0,
            
            'sabbath_overtime_hours': 0.0,
            'sabbath_overtime_pay': 0.0,
            
            'holiday_regular_hours': 0.0,
            'holiday_regular_pay': 0.0,
            
            'holiday_overtime_hours': 0.0,
            'holiday_overtime_pay': 0.0,
            
            'total_hours': 0.0,
            'total_pay': 0.0,
            
            'compensatory_days': standard_result.get('compensatory_days_earned', 0),
            'legal_violations': standard_result.get('legal_violations', []),
            'warnings': standard_result.get('warnings', [])
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á—ë—Ç
        for daily_calc in standard_result.get('daily_calculations', []):
            hours = daily_calc['hours_worked']
            is_night = daily_calc['is_night_shift']
            is_sabbath = daily_calc['is_sabbath']
            is_holiday = daily_calc['is_holiday']
            
            if daily_calc['breakdown']:
                regular_hours = daily_calc['breakdown'].get('regular_hours', 0)
                overtime_hours_1 = daily_calc['breakdown'].get('overtime_hours_1', 0)
                overtime_hours_2 = daily_calc['breakdown'].get('overtime_hours_2', 0)
                total_overtime = overtime_hours_1 + overtime_hours_2
                
                regular_pay = daily_calc['breakdown'].get('regular_pay', 0)
                overtime_pay = daily_calc['breakdown'].get('overtime_pay_1', 0) + daily_calc['breakdown'].get('overtime_pay_2', 0)
                
                if is_sabbath:
                    # –†–∞–±–æ—Ç–∞ –≤ —à–∞–±–∞—Ç
                    if total_overtime > 0:
                        # –ï—Å—Ç—å —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ –≤ —à–∞–±–∞—Ç
                        breakdown['sabbath_regular_hours'] += float(regular_hours)
                        breakdown['sabbath_regular_pay'] += float(regular_pay)
                        breakdown['sabbath_overtime_hours'] += float(total_overtime)
                        breakdown['sabbath_overtime_pay'] += float(overtime_pay)
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–±–æ—Ä —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–∞—Ç
                        # –°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ –≤ —à–∞–±–∞—Ç: 175% –∑–∞ –ø–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞, 200% –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
                        overtime_175_hours = float(overtime_hours_1)  # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ –ø–æ 175%
                        overtime_200_hours = float(overtime_hours_2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—ã –ø–æ 200%
                        overtime_175_pay = float(daily_calc['breakdown'].get('overtime_pay_1', 0))
                        overtime_200_pay = float(daily_calc['breakdown'].get('overtime_pay_2', 0))
                        
                        # –î–ª—è —à–∞–±–∞—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                        breakdown['overtime_125_hours'] += overtime_175_hours  # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ 175%
                        breakdown['overtime_125_pay'] += overtime_175_pay
                        breakdown['overtime_150_hours'] += overtime_200_hours  # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ 200%
                        breakdown['overtime_150_pay'] += overtime_200_pay
                    else:
                        # –í—Å–µ —á–∞—Å—ã - –æ–±—ã—á–Ω—ã–µ —à–∞–±–∞—Ç–Ω—ã–µ —á–∞—Å—ã
                        breakdown['sabbath_regular_hours'] += float(hours)
                        breakdown['sabbath_regular_pay'] += float(daily_calc['total_pay'])
                        
                elif is_holiday:
                    # –†–∞–±–æ—Ç–∞ –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫
                    if total_overtime > 0:
                        # –ï—Å—Ç—å —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫
                        breakdown['holiday_regular_hours'] += float(regular_hours)
                        breakdown['holiday_regular_pay'] += float(regular_pay)
                        breakdown['holiday_overtime_hours'] += float(total_overtime)
                        breakdown['holiday_overtime_pay'] += float(overtime_pay)
                        
                        # –†–∞–∑–±–æ—Ä —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫
                        overtime_175_hours = float(overtime_hours_1)  # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ –ø–æ 175%
                        overtime_200_hours = float(overtime_hours_2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—ã –ø–æ 200%
                        overtime_175_pay = float(daily_calc['breakdown'].get('overtime_pay_1', 0))
                        overtime_200_pay = float(daily_calc['breakdown'].get('overtime_pay_2', 0))
                        
                        breakdown['overtime_125_hours'] += overtime_175_hours
                        breakdown['overtime_125_pay'] += overtime_175_pay
                        breakdown['overtime_150_hours'] += overtime_200_hours
                        breakdown['overtime_150_pay'] += overtime_200_pay
                    else:
                        # –í—Å–µ —á–∞—Å—ã - –æ–±—ã—á–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —á–∞—Å—ã
                        breakdown['holiday_regular_hours'] += float(hours)
                        breakdown['holiday_regular_pay'] += float(daily_calc['total_pay'])
                        
                else:
                    # –û–±—ã—á–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
                    breakdown['regular_hours'] += float(regular_hours)
                    breakdown['regular_pay'] += float(regular_pay)
                    
                    if total_overtime > 0:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–±–æ—Ä —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–Ω–µ–π
                        overtime_125_hours = float(overtime_hours_1)  # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ –ø–æ 125%
                        overtime_150_hours = float(overtime_hours_2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—ã –ø–æ 150%
                        overtime_125_pay = float(daily_calc['breakdown'].get('overtime_pay_1', 0))
                        overtime_150_pay = float(daily_calc['breakdown'].get('overtime_pay_2', 0))
                        
                        breakdown['overtime_125_hours'] += overtime_125_hours
                        breakdown['overtime_125_pay'] += overtime_125_pay
                        breakdown['overtime_150_hours'] += overtime_150_hours
                        breakdown['overtime_150_pay'] += overtime_150_pay
                        
                        if is_night:
                            # –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞, —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ
                            breakdown['overtime_night_hours'] += float(total_overtime)
                            breakdown['overtime_night_pay'] += float(overtime_pay)
                        else:
                            # –î–Ω–µ–≤–Ω–∞—è —Å–º–µ–Ω–∞, —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ
                            breakdown['overtime_day_hours'] += float(total_overtime)
                            breakdown['overtime_day_pay'] += float(overtime_pay)
            
            breakdown['total_hours'] += float(hours)
            breakdown['total_pay'] += float(daily_calc['total_pay'])
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for key in breakdown:
            if isinstance(breakdown[key], float):
                breakdown[key] = round(breakdown[key], 2)
        
        return breakdown