# Generated manually for salary field validation fix

import django.core.validators
from django.db import migrations, models


def clean_salary_data(apps, schema_editor):
    """
    Clean existing salary data according to calculation_type rules:
    - hourly: keep only hourly_rate, set base_salary to null
    - monthly: keep only base_salary, set hourly_rate to null 
    - project: keep only one field (prefer base_salary for fixed-bid projects)
    """
    Salary = apps.get_model('payroll', 'Salary')
    
    for salary in Salary.objects.all():
        if salary.calculation_type == 'hourly':
            # For hourly: keep hourly_rate, clear base_salary
            if not salary.hourly_rate or salary.hourly_rate <= 0:
                # If no valid hourly_rate, set a default based on base_salary
                if salary.base_salary and salary.base_salary > 0:
                    # Estimate hourly rate (base_salary / 160 hours per month)
                    salary.hourly_rate = salary.base_salary / 160
                else:
                    # Set default hourly rate
                    salary.hourly_rate = 100.00
            salary.base_salary = None
            
        elif salary.calculation_type == 'monthly':
            # For monthly: keep base_salary, clear hourly_rate
            if not salary.base_salary or salary.base_salary <= 0:
                # If no valid base_salary, set based on hourly_rate
                if salary.hourly_rate and salary.hourly_rate > 0:
                    # Estimate monthly salary (hourly_rate * 160 hours per month)
                    salary.base_salary = salary.hourly_rate * 160
                else:
                    # Set default monthly salary
                    salary.base_salary = 15000.00
            salary.hourly_rate = None
            
        elif salary.calculation_type == 'project':
            # For project: prefer base_salary (fixed-bid), but allow hourly if only that exists
            if salary.base_salary and salary.base_salary > 0:
                # Keep base_salary for fixed-bid projects
                salary.hourly_rate = None
            elif salary.hourly_rate and salary.hourly_rate > 0:
                # Keep hourly_rate for hourly projects
                salary.base_salary = None
            else:
                # Set default project amount
                salary.base_salary = 20000.00
                salary.hourly_rate = None
        
        salary.save()


def reverse_clean_salary_data(apps, schema_editor):
    """
    Reverse migration - restore dual fields (not recommended in production)
    """
    Salary = apps.get_model('payroll', 'Salary')
    
    for salary in Salary.objects.all():
        if salary.calculation_type == 'hourly' and salary.hourly_rate:
            # Restore estimated base_salary
            salary.base_salary = salary.hourly_rate * 160
        elif salary.calculation_type == 'monthly' and salary.base_salary:
            # Restore estimated hourly_rate
            salary.hourly_rate = salary.base_salary / 160
        # For project type, leave as is since it could have either field
        
        salary.save()


class Migration(migrations.Migration):

    dependencies = [
        ('payroll', '0004_alter_salary_base_salary_and_more'),
    ]

    operations = [
        # First, make fields nullable
        migrations.AlterField(
            model_name='salary',
            name='base_salary',
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text='Monthly salary or total project cost (required for monthly/project types)',
                max_digits=10,
                null=True,
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        migrations.AlterField(
            model_name='salary',
            name='hourly_rate',
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text='Hourly rate (required for hourly type)',
                max_digits=6,
                null=True,
                validators=[django.core.validators.MinValueValidator(0)]
            ),
        ),
        
        # Then clean the data
        migrations.RunPython(
            clean_salary_data,
            reverse_clean_salary_data,
        ),
    ]