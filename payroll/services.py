"""
Enhanced payroll calculation service with external API integration

Combines:
1. Current working logic of PayrollCalculationService
2. Integration with SunriseSunsetService for precise Sabbath times  
3. Integration with HebcalService for Jewish holidays
4. API integration monitoring and fallback mechanisms
"""

from django.utils import timezone
from django.db import models
from datetime import datetime, date, timedelta
from decimal import Decimal
import logging
import calendar
import pytz

from worktime.models import WorkLog
from payroll.models import Salary, CompensatoryDay
from integrations.models import Holiday
from integrations.services.sunrise_sunset_service import SunriseSunsetService
from integrations.services.hebcal_service import HebcalService
from core.logging_utils import safe_log_employee

logger = logging.getLogger(__name__)


class EnhancedPayrollCalculationService:
    """
    ENHANCED payroll calculation service with full external API integration
    
    Preserves all current working logic and adds:
    - Precise Sabbath times via SunriseSunsetService
    - Automatic holiday synchronization via HebcalService
    - API integration monitoring
    - Fallback to existing logic when APIs are unavailable
    """
    
    # Israeli labor law constants for 5-day work week
    MAX_DAILY_HOURS = Decimal('12')
    MAX_WEEKLY_REGULAR_HOURS = Decimal('42')  # 5-day week
    MAX_WEEKLY_OVERTIME_HOURS = Decimal('16')
    MINIMUM_WAGE_ILS = Decimal('5300')
    MONTHLY_WORK_HOURS = Decimal('182')
    
    # Daily hour norms for 5-day week
    REGULAR_DAILY_HOURS = Decimal('8.6')  # 4 days per week
    SHORT_DAILY_HOURS = Decimal('7.6')    # 1 day per week (usually Friday)
    
    # Constants for night shifts
    NIGHT_SHIFT_START = 22  # 22:00
    NIGHT_SHIFT_END = 6     # 06:00
    NIGHT_SHIFT_MAX_REGULAR_HOURS = Decimal('7')  # Max regular hours for night shift
    
    # Payment coefficients
    OVERTIME_RATE_1 = Decimal('1.25')  # First 2 overtime hours
    OVERTIME_RATE_2 = Decimal('1.50')  # Additional overtime hours
    HOLIDAY_RATE = Decimal('1.50')     # Holiday work coefficient
    SABBATH_RATE = Decimal('1.50')     # Sabbath work coefficient
    
    def __init__(self, employee, year, month, fast_mode=False):
        """
        Initialize enhanced payroll calculation
        
        Args:
            employee (Employee): Employee object
            year (int): Year for calculation
            month (int): Month for calculation
            fast_mode (bool): Fast mode without external APIs for list views
        """
        self.employee = employee
        self.year = year
        self.month = month
        self.salary = employee.salary_info
        self.calculation_errors = []
        self.warnings = []
        self.fast_mode = fast_mode
        
        # Debug logging for fast mode
        logger.info(f"üöÄ EnhancedPayrollCalculationService initialized with fast_mode={self.fast_mode}")
        
        # Coordinates for Israel (can be made configurable)
        self.default_lat = 31.7683  # Jerusalem
        self.default_lng = 35.2137
        
        # Timezone for Israel
        self.israel_tz = pytz.timezone('Asia/Jerusalem')
        
        # API usage tracking
        self.api_usage = {
            'sunrise_sunset_calls': 0,
            'hebcal_calls': 0,
            'precise_sabbath_times': 0,
            'api_holidays_found': 0,
            'fallback_calculations': 0
        }
        
    def get_work_logs_for_month(self):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è –º–µ—Å—è—Ü–∞
        
        Returns:
            QuerySet: –†–∞–±–æ—á–∏–µ –ª–æ–≥–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        """
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ—Å—è—Ü–∞
        start_date = date(self.year, self.month, 1)
        _, last_day = calendar.monthrange(self.year, self.month)
        end_date = date(self.year, self.month, last_day)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        work_logs = WorkLog.objects.filter(
            employee=self.employee,
            check_out__isnull=False  # –¢–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        ).filter(
            # –°–µ—Å—Å–∏—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –º–µ—Å—è—Ü–µ–º
            models.Q(check_in__date__lte=end_date) & 
            models.Q(check_out__date__gte=start_date)
        ).order_by('check_in')
        
        logger.info("üìä –ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", extra={
            **safe_log_employee(self.employee, "payroll_sessions"),
            "session_count": work_logs.count(),
            "period": f"{self.year}-{self.month:02d}"
        })
                   f"–≤ {self.year}-{self.month:02d}")
        
        return work_logs
    
    def is_sabbath_work_precise(self, work_datetime):
        """
        –£–õ–£–ß–®–ï–ù–û: –¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SunriseSunsetService
        
        Args:
            work_datetime (datetime): –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            
        Returns:
            tuple: (is_sabbath, sabbath_type, sabbath_info)
        """
        work_date = work_datetime.date()
        work_time = work_datetime.time()
        shabbat_times = None  # Initialize to prevent errors
        
        # 1. Check registered sabbath in database first
        sabbath_holiday = Holiday.objects.filter(
            date=work_date,
            is_shabbat=True
        ).first()
        
        if sabbath_holiday:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if sabbath_holiday.start_time and sabbath_holiday.end_time:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑—Ä–∞–∏–ª—å—Å–∫–∏–π timezone
                start_time_israel = sabbath_holiday.start_time.astimezone(self.israel_tz)
                end_time_israel = sabbath_holiday.end_time.astimezone(self.israel_tz)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ä–∞–±–æ—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ —à–∞–±–∞—Ç–∞
                if work_datetime.tzinfo is None:
                    work_datetime = timezone.make_aware(work_datetime)
                work_datetime_israel = work_datetime.astimezone(self.israel_tz)
                
                if start_time_israel <= work_datetime_israel <= end_time_israel:
                    return True, 'registered_sabbath_precise', sabbath_holiday
            else:
                # –ù–µ—Ç —Ç–æ—á–Ω—ã—Ö –≤—Ä–µ–º—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É
                return True, 'registered_sabbath', sabbath_holiday
        
        # 2. Use SunriseSunsetService for precise calculation (only if not in fast mode)
        if not self.fast_mode:
            logger.info(f"üöÄ Using SunriseSunsetService for precise sabbath calculation (fast_mode={self.fast_mode})")
            try:
                self.api_usage['sunrise_sunset_calls'] += 1
                
                if work_date.weekday() == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
                    shabbat_times = SunriseSunsetService.get_shabbat_times(work_date)
                
                if not shabbat_times.get('is_estimated', True):
                    # –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –æ—Ç API
                    self.api_usage['precise_sabbath_times'] += 1
                    
                    shabbat_start_str = shabbat_times['start']
                    
                    # –ü–∞—Ä—Å–∏–º UTC –≤—Ä–µ–º—è –æ—Ç API
                    try:
                        if shabbat_start_str.endswith('Z'):
                            shabbat_start_str = shabbat_start_str.replace('Z', '+00:00')
                        shabbat_start_utc = datetime.fromisoformat(shabbat_start_str)
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑—Ä–∞–∏–ª—å—Å–∫–∏–π timezone
                        if shabbat_start_utc.tzinfo is None:
                            shabbat_start_utc = pytz.UTC.localize(shabbat_start_utc)
                        
                        shabbat_start_local = shabbat_start_utc.astimezone(self.israel_tz)
                        
                        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º timezone-aware –¥–ª—è work_datetime
                        if work_datetime.tzinfo is None:
                            work_datetime = timezone.make_aware(work_datetime)
                        work_local = work_datetime.astimezone(self.israel_tz)
                        
                        if work_local >= shabbat_start_local:
                            logger.info(f"‚úÖ –¢–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ —à–∞–±–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞ {work_date}: "
                                      f"—Ä–∞–±–æ—Ç–∞ –≤ {work_local.strftime('%H:%M')}, "
                                      f"—à–∞–±–∞—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ {shabbat_start_local.strftime('%H:%M')}")
                            return True, 'friday_evening_precise', shabbat_times
                            
                    except Exception as parse_error:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —à–∞–±–∞—Ç–∞ –¥–ª—è {work_date}: {parse_error}")
                        self.api_usage['fallback_calculations'] += 1
                        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏
                        if work_datetime.time().hour >= 18:
                            return True, 'friday_evening_fallback', None
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è (18:00)
                    self.api_usage['fallback_calculations'] += 1
                    if work_datetime.time().hour >= 18:
                        return True, 'friday_evening_estimated', shabbat_times
                        
                
                if work_date.weekday() == 5:  # –°—É–±–±–æ—Ç–∞
                    # –î–ª—è —Å—É–±–±–æ—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ —à–∞–±–∞—Ç–∞
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ —à–∞–±–∞—Ç–∞ –¥–ª—è –ø—è—Ç–Ω–∏—Ü—ã (–∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∞–ª–∞—Å—å –≤ —ç—Ç–æ—Ç —à–∞–±–∞—Ç)
                        friday_date = work_date - timedelta(days=1)
                        shabbat_times = SunriseSunsetService.get_shabbat_times(friday_date)
                        
                        if not shabbat_times.get('is_estimated', True):
                            self.api_usage['precise_sabbath_times'] += 1
                            shabbat_end_str = shabbat_times['end']
                            
                            try:
                                if shabbat_end_str.endswith('Z'):
                                    shabbat_end_str = shabbat_end_str.replace('Z', '+00:00')
                                shabbat_end_utc = datetime.fromisoformat(shabbat_end_str)
                                
                                if shabbat_end_utc.tzinfo is None:
                                    shabbat_end_utc = pytz.UTC.localize(shabbat_end_utc)
                                
                                shabbat_end_local = shabbat_end_utc.astimezone(self.israel_tz)
                                
                                if work_datetime.tzinfo is None:
                                    work_datetime = timezone.make_aware(work_datetime)
                                work_local = work_datetime.astimezone(self.israel_tz)
                                
                                if work_local <= shabbat_end_local:
                                    logger.info(f"‚úÖ –¢–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ —à–∞–±–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞ {work_date}: "
                                              f"—Ä–∞–±–æ—Ç–∞ –≤ {work_local.strftime('%H:%M')}, "
                                              f"—à–∞–±–∞—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ {shabbat_end_local.strftime('%H:%M')}")
                                    return True, 'saturday_precise', shabbat_times
                            except Exception as parse_error:
                                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —à–∞–±–∞—Ç–∞ –¥–ª—è {work_date}: {parse_error}")
                        
                        # Fallback: –≤—Å—è —Å—É–±–±–æ—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —à–∞–±–∞—Ç–æ–º
                        self.api_usage['fallback_calculations'] += 1
                        return True, 'saturday_all_day', shabbat_times
                        
                    except Exception as api_error:
                        logger.warning(f"–û—à–∏–±–∫–∞ SunriseSunsetService –¥–ª—è —Å—É–±–±–æ—Ç—ã {work_date}: {api_error}")
                        self.api_usage['fallback_calculations'] += 1
                        # Fallback: –≤—Å—è —Å—É–±–±–æ—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —à–∞–±–∞—Ç–æ–º
                        return True, 'saturday_fallback', None
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SunriseSunsetService –¥–ª—è {work_date}: {e}")
                self.api_usage['fallback_calculations'] += 1
        
        # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ (–∏–ª–∏ –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)
        if work_date.weekday() == 4 and work_datetime.time().hour >= 18:
            return True, 'friday_evening_simple', None
        elif work_date.weekday() == 5:
            return True, 'saturday_simple', None
                
        return False, None, None
    
    def is_holiday_work_enhanced(self, work_date):
        """
        –£–õ–£–ß–®–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HebcalService
        
        Args:
            work_date (date): –î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
            
        Returns:
            Holiday object –∏–ª–∏ None
        """
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        holiday = Holiday.objects.filter(
            date=work_date,
            is_holiday=True,
            is_shabbat=False  # –ò—Å–∫–ª—é—á–∞–µ–º —à–∞–±–∞—Ç—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
        ).first()
        
        if holiday:
            logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫: {holiday.name} –Ω–∞ {work_date}")
            return holiday
        
        # 2. If not in database, check via HebcalService (only if not in fast mode)
        if not self.fast_mode:
            logger.info(f"üöÄ Using HebcalService for holiday lookup (fast_mode={self.fast_mode})")
            try:
                self.api_usage['hebcal_calls'] += 1
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –¥–ª—è –≥–æ–¥–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
                holidays_data = HebcalService.fetch_holidays(
                    year=work_date.year, 
                    month=work_date.month,
                    use_cache=True
                )
                
                # –ò—â–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                for holiday_data in holidays_data:
                    holiday_date_str = holiday_data.get("date")
                    if holiday_date_str:
                        try:
                            holiday_date = datetime.strptime(holiday_date_str, "%Y-%m-%d").date()
                            if holiday_date == work_date:
                                title = holiday_data.get("title", "Unknown Holiday")
                                self.api_usage['api_holidays_found'] += 1
                                logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–∑–¥–Ω–∏–∫ —á–µ—Ä–µ–∑ HebcalService: {title} –Ω–∞ {work_date}")
                                
                                # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Holiday –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                                temp_holiday = type('Holiday', (), {
                                    'name': title,
                                    'date': work_date,
                                    'is_holiday': True,
                                    'is_shabbat': holiday_data.get('subcat') == 'shabbat'
                                })()
                                
                                return temp_holiday
                        except ValueError:
                            continue
                        
            except Exception as api_error:
                logger.warning(f"–û—à–∏–±–∫–∞ HebcalService –¥–ª—è {work_date}: {api_error}")
        
        return None
    
    def sync_missing_holidays_for_month(self):
        """
        –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        """
        # –í –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        if self.fast_mode:
            logger.info(f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –¥–ª—è {self.year}-{self.month:02d}")
            return
            
        try:
            logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –¥–ª—è {self.year}-{self.month:02d}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –≤ –±–∞–∑–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞
            existing_holidays = Holiday.objects.filter(
                date__year=self.year,
                date__month=self.month
            ).count()
            
            if existing_holidays == 0:
                logger.info("–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑ HebcalService...")
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –¥–ª—è –≥–æ–¥–∞
                created_count, updated_count = HebcalService.sync_holidays_to_db(self.year)
                
                if created_count > 0 or updated_count > 0:
                    logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–∑–¥–Ω–∏–∫–∏: {created_count} —Å–æ–∑–¥–∞–Ω–æ, {updated_count} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                else:
                    logger.warning("–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–µ –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {existing_holidays} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –¥–ª—è {self.year}-{self.month:02d}")
                
        except Exception as sync_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {sync_error}")
            # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    
    def is_night_shift(self, work_log):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–º—É –ø—Ä–∞–≤—É
        """
        check_in = work_log.check_in
        check_out = work_log.check_out
        
        night_hours = Decimal('0')
        night_start = check_in.replace(hour=self.NIGHT_SHIFT_START, minute=0, second=0)
        night_end = check_in.replace(hour=self.NIGHT_SHIFT_END, minute=0, second=0)
        
        if night_end <= night_start:
            night_end += timedelta(days=1)
        
        if check_out > night_start and check_in < night_end:
            overlap_start = max(check_in, night_start)
            overlap_end = min(check_out, night_end)
            
            if overlap_end > overlap_start:
                night_hours = Decimal((overlap_end - overlap_start).total_seconds() / 3600)
        
        is_night = night_hours >= Decimal('2')
        return is_night, night_hours
    
    def calculate_overtime_pay(self, hours_worked, base_rate, is_special_day=False, is_night_shift=False):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—á—ë—Ç —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–º—É —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É
        """
        if base_rate is None:
            base_rate = Decimal('0')
        
        result = {
            'regular_hours': Decimal('0'),
            'regular_pay': Decimal('0'),
            'overtime_hours_1': Decimal('0'),  # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö
            'overtime_pay_1': Decimal('0'),
            'overtime_hours_2': Decimal('0'),  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ
            'overtime_pay_2': Decimal('0'),
            'total_pay': Decimal('0'),
            'rate_used': base_rate
        }
        
        if hours_worked <= 0:
            return result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        if hours_worked > self.MAX_DAILY_HOURS:
            warning = (f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {self.employee.get_full_name()} –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π "
                      f"—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å: {hours_worked}—á > {self.MAX_DAILY_HOURS}—á")
            self.warnings.append(warning)
            logger.warning(warning)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö —á–∞—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–º–µ–Ω—ã
        if is_night_shift:
            max_regular_hours = self.NIGHT_SHIFT_MAX_REGULAR_HOURS
        else:
            max_regular_hours = Decimal('8.6')
        
        regular_hours = min(hours_worked, max_regular_hours)
        result['regular_hours'] = regular_hours
        
        # –†–∞—Å—á—ë—Ç –æ–±—ã—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        if is_special_day:
            # –†–∞–±–æ—Ç–∞ –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫/—à–∞–±–∞—Ç –ø–æ–ª—É—á–∞–µ—Ç 150% –∑–∞ –≤—Å–µ —á–∞—Å—ã
            result['regular_pay'] = regular_hours * base_rate * self.HOLIDAY_RATE
        else:
            result['regular_pay'] = regular_hours * base_rate
        
        # –°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ —á–∞—Å—ã
        if hours_worked > max_regular_hours:
            overtime_total = hours_worked - max_regular_hours
            
            if is_special_day:
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫/—à–∞–±–∞—Ç
                # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö: 175% (150% –±–∞–∑–æ–≤—ã–π + 25% —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–π)
                overtime_rate_1 = base_rate * Decimal('1.75')
                overtime_hours_1 = min(overtime_total, Decimal('2'))
                result['overtime_hours_1'] = overtime_hours_1
                result['overtime_pay_1'] = overtime_hours_1 * overtime_rate_1
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ: 200% (150% –±–∞–∑–æ–≤—ã–π + 50% —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–π)
                if overtime_total > 2:
                    overtime_rate_2 = base_rate * Decimal('2.0')
                    overtime_hours_2 = overtime_total - Decimal('2')
                    result['overtime_hours_2'] = overtime_hours_2
                    result['overtime_pay_2'] = overtime_hours_2 * overtime_rate_2
            else:
                # –û–±—ã—á–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö
                # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö: 125%
                overtime_rate_1 = base_rate * self.OVERTIME_RATE_1
                overtime_hours_1 = min(overtime_total, Decimal('2'))
                result['overtime_hours_1'] = overtime_hours_1
                result['overtime_pay_1'] = overtime_hours_1 * overtime_rate_1
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ: 150%
                if overtime_total > 2:
                    overtime_rate_2 = base_rate * self.OVERTIME_RATE_2
                    overtime_hours_2 = overtime_total - Decimal('2')
                    result['overtime_hours_2'] = overtime_hours_2
                    result['overtime_pay_2'] = overtime_hours_2 * overtime_rate_2
        
        result['total_pay'] = result['regular_pay'] + result['overtime_pay_1'] + result['overtime_pay_2']
        return result
    
    def calculate_daily_pay_enhanced(self, work_log):
        """
        –£–õ–£–ß–®–ï–ù–û: –†–∞—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –∑–∞ –¥–µ–Ω—å —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        """
        work_date = work_log.check_in.date()
        hours_worked = work_log.get_total_hours()
        base_rate = self.salary.hourly_rate or Decimal('0')
        
        result = {
            'date': work_date,
            'hours_worked': hours_worked,
            'is_holiday': False,
            'is_sabbath': False,
            'is_night_shift': False,
            'night_hours': Decimal('0'),
            'holiday_name': None,
            'sabbath_type': None,
            'sabbath_info': None,
            'compensatory_day_created': False,
            'regular_pay': Decimal('0'),
            'overtime_pay': Decimal('0'),
            'special_day_bonus': Decimal('0'),
            'total_pay': Decimal('0'),
            'breakdown': {},
            'api_sources': []  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã
        is_night, night_hours = self.is_night_shift(work_log)
        result['is_night_shift'] = is_night
        result['night_hours'] = night_hours
        
        # –£–õ–£–ß–®–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫ —Å HebcalService
        holiday = self.is_holiday_work_enhanced(work_date)
        if holiday:
            result['is_holiday'] = True
            result['holiday_name'] = holiday.name
            result['api_sources'].append('hebcal_api' if not hasattr(holiday, 'id') else 'database')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–Ω—è
            created, _ = self.create_compensatory_day(work_date, 'holiday', hours_worked)
            result['compensatory_day_created'] = created
            
            # –†–∞—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
            pay_breakdown = self.calculate_overtime_pay(
                hours_worked, base_rate, is_special_day=True, is_night_shift=is_night
            )
            result['breakdown'] = pay_breakdown
            result['total_pay'] = pay_breakdown['total_pay']
            
            logger.info(f"üí∞ –†–∞—Å—á—ë—Ç —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫: {work_date} - {hours_worked}—á = ‚Ç™{result['total_pay']}")
            return result
        
        # –£–õ–£–ß–®–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–∞—Ç —Å SunriseSunsetService
        is_sabbath, sabbath_type, sabbath_info = self.is_sabbath_work_precise(work_log.check_in)
        if is_sabbath:
            result['is_sabbath'] = True
            result['sabbath_type'] = sabbath_type
            result['sabbath_info'] = sabbath_info
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —à–∞–±–∞—Ç–µ
            if 'precise' in sabbath_type:
                result['api_sources'].append('sunrise_sunset_api')
            elif 'registered' in sabbath_type:
                result['api_sources'].append('database')
            else:
                result['api_sources'].append('fallback_calculation')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–Ω—è
            created, _ = self.create_compensatory_day(work_date, 'shabbat', hours_worked)
            result['compensatory_day_created'] = created
            
            # –†–∞—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –ø–æ —à–∞–±–∞—Ç–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º
            pay_breakdown = self.calculate_overtime_pay(
                hours_worked, base_rate, is_special_day=True, is_night_shift=is_night
            )
            result['breakdown'] = pay_breakdown
            result['total_pay'] = pay_breakdown['total_pay']
            
            logger.info(f"üïØÔ∏è –†–∞—Å—á—ë—Ç —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–∞—Ç: {work_date} ({sabbath_type}) - {hours_worked}—á = ‚Ç™{result['total_pay']}")
            return result
        
        # –†–∞—Å—á—ë—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        pay_breakdown = self.calculate_overtime_pay(
            hours_worked, base_rate, is_special_day=False, is_night_shift=is_night
        )
        result['breakdown'] = pay_breakdown
        result['total_pay'] = pay_breakdown['total_pay']
        
        logger.debug(f"üíº –†–∞—Å—á—ë—Ç –æ–±—ã—á–Ω–æ–≥–æ –¥–Ω—è: {work_date} - {hours_worked}—á = ‚Ç™{result['total_pay']}")
        return result
    
    def create_compensatory_day(self, work_date, reason, work_hours=None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–Ω—è –∑–∞ —Ä–∞–±–æ—Ç—É –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ —à–∞–±–∞—Ç
        """
        try:
            existing = CompensatoryDay.objects.filter(
                employee=self.employee,
                date_earned=work_date,
                reason=reason
            ).first()
            
            if existing:
                logger.debug("–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–µ–Ω—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", extra={
                    **safe_log_employee(self.employee, "compensatory_exists"),
                    "date": compensatory_date.isoformat()
                })
                           f"–Ω–∞ {work_date} (–ø—Ä–∏—á–∏–Ω–∞: {reason})")
                return False, existing
            
            comp_day = CompensatoryDay.objects.create(
                employee=self.employee,
                date_earned=work_date,
                reason=reason
            )
            
            logger.info("–°–æ–∑–¥–∞–Ω –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–µ–Ω—å", extra={
                **safe_log_employee(self.employee, "compensatory_created"),
                "date": compensatory_date.isoformat(),
                "reason": reason
            })
                       f"–Ω–∞ {work_date} (–ø—Ä–∏—á–∏–Ω–∞: {reason})"
                       + (f" - {work_hours}—á –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ" if work_hours else ""))
            
            return True, comp_day
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–Ω—è –¥–ª—è {self.employee.get_full_name()}: {e}"
            self.calculation_errors.append(error_msg)
            logger.error(error_msg)
            return False, None
    
    def calculate_monthly_salary_enhanced(self):
        """
        –£–õ–£–ß–®–ï–ù–û: –†–∞—Å—á—ë—Ç –º–µ—Å—è—á–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤–Ω–µ—à–Ω–∏—Ö API
        """
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º
        self.sync_missing_holidays_for_month()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–µ –ª–æ–≥–∏
        work_logs = self.get_work_logs_for_month()
        
        result = {
            'employee': self.employee.get_full_name(),
            'period': f"{self.year}-{self.month:02d}",
            'calculation_type': self.salary.calculation_type,
            'currency': self.salary.currency,
            'base_hourly_rate': self.salary.hourly_rate,
            'daily_calculations': [],
            'total_hours': Decimal('0'),
            'regular_hours': Decimal('0'),
            'overtime_hours': Decimal('0'),
            'holiday_hours': Decimal('0'),
            'sabbath_hours': Decimal('0'),
            'total_gross_pay': Decimal('0'),
            'compensatory_days_earned': 0,
            'legal_violations': [],
            'warnings': [],
            'errors': self.calculation_errors,
            'minimum_wage_applied': False,
            'work_sessions_count': work_logs.count(),
            'worked_days': 0,
            'api_integrations': {  # –ù–û–í–û–ï: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
                'sunrise_sunset_used': self.api_usage['sunrise_sunset_calls'] > 0,
                'hebcal_used': self.api_usage['hebcal_calls'] > 0,
                'precise_sabbath_times': self.api_usage['precise_sabbath_times'],
                'api_holidays_found': self.api_usage['api_holidays_found'],
                'fallback_calculations': self.api_usage['fallback_calculations']
            }
        }
        
        if not work_logs.exists():
            result['note'] = '–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞'
            logger.info(f"–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è {self.employee.get_full_name()} –≤ {self.year}-{self.month:02d}")
            return result
        
        # –†–∞—Å—á—ë—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
        for log in work_logs:
            daily_calc = self.calculate_daily_pay_enhanced(log)
            result['daily_calculations'].append(daily_calc)
            
            # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
            result['total_hours'] += daily_calc['hours_worked']
            result['total_gross_pay'] += daily_calc['total_pay']
            
            # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º
            if daily_calc['breakdown']:
                if not daily_calc['is_holiday'] and not daily_calc['is_sabbath']:
                    result['regular_hours'] += daily_calc['breakdown'].get('regular_hours', Decimal('0'))
                    result['overtime_hours'] += (
                        daily_calc['breakdown'].get('overtime_hours_1', Decimal('0')) +
                        daily_calc['breakdown'].get('overtime_hours_2', Decimal('0'))
                    )
            
            if daily_calc['is_holiday']:
                result['holiday_hours'] += daily_calc['hours_worked']
            elif daily_calc['is_sabbath']:
                result['sabbath_hours'] += daily_calc['hours_worked']
                
            if daily_calc['compensatory_day_created']:
                result['compensatory_days_earned'] += 1
        
        # –ü–æ–¥—Å—á—ë—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
        worked_days = len(set(log.check_in.date() for log in work_logs))
        result['worked_days'] = worked_days
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É
        violations = self.validate_weekly_limits(work_logs)
        result['legal_violations'] = violations
        result['warnings'] = self.warnings
        
        # Special handling for monthly employees
        if self.salary.calculation_type == 'monthly':
            # For monthly employees, use base salary as total gross pay
            # Daily calculations are only for overtime and special day bonuses
            if self.salary.base_salary:
                base_monthly_pay = Decimal(str(self.salary.base_salary))
                overtime_and_bonuses = result['total_gross_pay']  # This is from daily calculations
                result['total_gross_pay'] = base_monthly_pay + overtime_and_bonuses
                result['base_salary'] = float(base_monthly_pay)
                result['overtime_bonus'] = float(overtime_and_bonuses)
                logger.info(f"Monthly employee {self.employee.get_full_name()}: "
                           f"Base ‚Ç™{base_monthly_pay} + Overtime/Bonuses ‚Ç™{overtime_and_bonuses} = "
                           f"Total ‚Ç™{result['total_gross_pay']}")
        
        # Apply minimum wage
        if (self.salary.currency == 'ILS' and 
            result['total_gross_pay'] < self.MINIMUM_WAGE_ILS and
            result['total_hours'] >= 186):
            
            result['original_gross_pay'] = result['total_gross_pay']
            result['total_gross_pay'] = self.MINIMUM_WAGE_ILS
            result['minimum_wage_applied'] = True
            result['minimum_wage_supplement'] = self.MINIMUM_WAGE_ILS - result['original_gross_pay']
        
        # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—É–º–º
        result['total_gross_pay'] = round(result['total_gross_pay'], 2)
        result['total_hours'] = round(result['total_hours'], 2)
        result['regular_hours'] = round(result['regular_hours'], 2)
        result['overtime_hours'] = round(result['overtime_hours'], 2)
        result['holiday_hours'] = round(result['holiday_hours'], 2)
        result['sabbath_hours'] = round(result['sabbath_hours'], 2)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
        api_info = result['api_integrations']
        logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {self.employee.get_full_name()}: "
                   f"‚Ç™{result['total_gross_pay']} –∑–∞ {result['total_hours']}—á | "
                   f"APIs –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã: SunriseSunset={api_info['sunrise_sunset_used']}, "
                   f"Hebcal={api_info['hebcal_used']}, "
                   f"–¢–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞={api_info['precise_sabbath_times']}")
        
        return result
    
    def validate_weekly_limits(self, work_logs):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–º—É —Ç—Ä—É–¥–æ–≤–æ–º—É –ø—Ä–∞–≤—É
        """
        violations = []
        
        weeks = {}
        for log in work_logs:
            monday = log.check_in.date() - timedelta(days=log.check_in.weekday())
            if monday not in weeks:
                weeks[monday] = []
            weeks[monday].append(log)
        
        for week_start, week_logs in weeks.items():
            week_end = week_start + timedelta(days=6)
            total_hours = sum(log.get_total_hours() for log in week_logs)
            
            regular_hours = min(total_hours, self.MAX_WEEKLY_REGULAR_HOURS)
            overtime_hours = max(Decimal('0'), total_hours - self.MAX_WEEKLY_REGULAR_HOURS)
            
            max_total = self.MAX_WEEKLY_REGULAR_HOURS + self.MAX_WEEKLY_OVERTIME_HOURS
            if total_hours > max_total:
                violation = {
                    'type': 'weekly_hours_exceeded',
                    'week_start': week_start,
                    'week_end': week_end,
                    'total_hours': total_hours,
                    'max_allowed': max_total,
                    'excess_hours': total_hours - max_total
                }
                violations.append(violation)
                
            elif overtime_hours > self.MAX_WEEKLY_OVERTIME_HOURS:
                violation = {
                    'type': 'overtime_exceeded',
                    'week_start': week_start,
                    'week_end': week_end,
                    'overtime_hours': overtime_hours,
                    'max_overtime': self.MAX_WEEKLY_OVERTIME_HOURS,
                    'excess_overtime': overtime_hours - self.MAX_WEEKLY_OVERTIME_HOURS
                }
                violations.append(violation)
        
        return violations
    
    def get_detailed_breakdown(self):
        """
        –£–õ–£–ß–®–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ —Å API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç
        standard_result = self.calculate_monthly_salary_enhanced()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä
        breakdown = {
            'employee': self.employee.get_full_name(),
            'period': f"{self.year}-{self.month:02d}",
            'hourly_rate': float(self.salary.hourly_rate) if self.salary.hourly_rate else 0,
            'currency': self.salary.currency,
            
            # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'regular_hours': 0.0,
            'regular_pay': 0.0,
            
            'overtime_day_hours': 0.0,
            'overtime_day_pay': 0.0,
            
            'overtime_night_hours': 0.0,
            'overtime_night_pay': 0.0,
            
            'overtime_125_hours': 0.0,
            'overtime_125_pay': 0.0,
            'overtime_150_hours': 0.0,
            'overtime_150_pay': 0.0,
            
            'sabbath_regular_hours': 0.0,
            'sabbath_regular_pay': 0.0,
            
            'sabbath_overtime_hours': 0.0,
            'sabbath_overtime_pay': 0.0,
            
            'holiday_regular_hours': 0.0,
            'holiday_regular_pay': 0.0,
            
            'holiday_overtime_hours': 0.0,
            'holiday_overtime_pay': 0.0,
            
            'total_hours': 0.0,
            'total_pay': 0.0,
            
            'compensatory_days': standard_result.get('compensatory_days_earned', 0),
            'legal_violations': standard_result.get('legal_violations', []),
            'warnings': standard_result.get('warnings', []),
            
            # –ù–û–í–û–ï: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö
            'api_integrations': standard_result.get('api_integrations', {})
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—á—ë—Ç
        for daily_calc in standard_result.get('daily_calculations', []):
            hours = daily_calc['hours_worked']
            is_night = daily_calc['is_night_shift']
            is_sabbath = daily_calc['is_sabbath']
            is_holiday = daily_calc['is_holiday']
            
            if daily_calc['breakdown']:
                regular_hours = daily_calc['breakdown'].get('regular_hours', 0)
                overtime_hours_1 = daily_calc['breakdown'].get('overtime_hours_1', 0)
                overtime_hours_2 = daily_calc['breakdown'].get('overtime_hours_2', 0)
                total_overtime = overtime_hours_1 + overtime_hours_2
                
                regular_pay = daily_calc['breakdown'].get('regular_pay', 0)
                overtime_pay = daily_calc['breakdown'].get('overtime_pay_1', 0) + daily_calc['breakdown'].get('overtime_pay_2', 0)
                
                if is_sabbath:
                    # –†–∞–±–æ—Ç–∞ –≤ —à–∞–±–∞—Ç
                    if total_overtime > 0:
                        breakdown['sabbath_regular_hours'] += float(regular_hours)
                        breakdown['sabbath_regular_pay'] += float(regular_pay)
                        breakdown['sabbath_overtime_hours'] += float(total_overtime)
                        breakdown['sabbath_overtime_pay'] += float(overtime_pay)
                        
                        # –†–∞–∑–±–æ—Ä —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —à–∞–±–∞—Ç
                        overtime_175_hours = float(overtime_hours_1)  # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ –ø–æ 175%
                        overtime_200_hours = float(overtime_hours_2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—ã –ø–æ 200%
                        overtime_175_pay = float(daily_calc['breakdown'].get('overtime_pay_1', 0))
                        overtime_200_pay = float(daily_calc['breakdown'].get('overtime_pay_2', 0))
                        
                        breakdown['overtime_125_hours'] += overtime_175_hours  # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ 175%
                        breakdown['overtime_125_pay'] += overtime_175_pay
                        breakdown['overtime_150_hours'] += overtime_200_hours  # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ 200%
                        breakdown['overtime_150_pay'] += overtime_200_pay
                    else:
                        breakdown['sabbath_regular_hours'] += float(hours)
                        breakdown['sabbath_regular_pay'] += float(daily_calc['total_pay'])
                        
                elif is_holiday:
                    # –†–∞–±–æ—Ç–∞ –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫
                    if total_overtime > 0:
                        breakdown['holiday_regular_hours'] += float(regular_hours)
                        breakdown['holiday_regular_pay'] += float(regular_pay)
                        breakdown['holiday_overtime_hours'] += float(total_overtime)
                        breakdown['holiday_overtime_pay'] += float(overtime_pay)
                        
                        # –†–∞–∑–±–æ—Ä —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫
                        overtime_175_hours = float(overtime_hours_1)
                        overtime_200_hours = float(overtime_hours_2)
                        overtime_175_pay = float(daily_calc['breakdown'].get('overtime_pay_1', 0))
                        overtime_200_pay = float(daily_calc['breakdown'].get('overtime_pay_2', 0))
                        
                        breakdown['overtime_125_hours'] += overtime_175_hours
                        breakdown['overtime_125_pay'] += overtime_175_pay
                        breakdown['overtime_150_hours'] += overtime_200_hours
                        breakdown['overtime_150_pay'] += overtime_200_pay
                    else:
                        breakdown['holiday_regular_hours'] += float(hours)
                        breakdown['holiday_regular_pay'] += float(daily_calc['total_pay'])
                        
                else:
                    # –û–±—ã—á–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
                    breakdown['regular_hours'] += float(regular_hours)
                    breakdown['regular_pay'] += float(regular_pay)
                    
                    if total_overtime > 0:
                        # –†–∞–∑–±–æ—Ä —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–Ω–µ–π
                        overtime_125_hours = float(overtime_hours_1)  # –ü–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞ –ø–æ 125%
                        overtime_150_hours = float(overtime_hours_2)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—ã –ø–æ 150%
                        overtime_125_pay = float(daily_calc['breakdown'].get('overtime_pay_1', 0))
                        overtime_150_pay = float(daily_calc['breakdown'].get('overtime_pay_2', 0))
                        
                        breakdown['overtime_125_hours'] += overtime_125_hours
                        breakdown['overtime_125_pay'] += overtime_125_pay
                        breakdown['overtime_150_hours'] += overtime_150_hours
                        breakdown['overtime_150_pay'] += overtime_150_pay
                        
                        if is_night:
                            breakdown['overtime_night_hours'] += float(total_overtime)
                            breakdown['overtime_night_pay'] += float(overtime_pay)
                        else:
                            breakdown['overtime_day_hours'] += float(total_overtime)
                            breakdown['overtime_day_pay'] += float(overtime_pay)
            
            breakdown['total_hours'] += float(hours)
            breakdown['total_pay'] += float(daily_calc['total_pay'])
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for key in breakdown:
            if isinstance(breakdown[key], float):
                breakdown[key] = round(breakdown[key], 2)
        
        return breakdown


    def calculate_monthly_salary(self):
        """
        –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –í—ã–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞
        """
        return self.calculate_monthly_salary_enhanced()


# –°–æ–∑–¥–∞—ë–º –∞–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
PayrollCalculationService = EnhancedPayrollCalculationService